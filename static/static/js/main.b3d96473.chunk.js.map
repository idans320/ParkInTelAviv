{"version":3,"sources":["shared/parkStatus.js","shared/geometryLib.js","components/searchComponent.js","icons.js","components/mapComponent.js","components/detailCardComponent.js","components/panelComponent.js","App.js","serviceWorker.js","index.js","img/parking.jpg"],"names":["id","$","serviceUrl","then","res","response","this","getByID","status","convertToLonLat","geojson","latitude","geometry","coordinates","longitude","Search","props","state","locateAddress","bind","event","preventDefault","address","target","elements","value","NominatimJS","search","street","city","results","length","point","GeoJSONParser","Point","closetParks","closest","handler","searchPoint","parkings","alert","_parking","Object","assign","parking","Promise","all","features","map","item","index","a","p1","p2","dist","getDistance","ParkStatus","isFree","properties","parkingid","distance","boolArray","filter","className","Form","centerPoint","onSubmit","aria-hidden","name","type","placeholder","aria-label","Component","parkingIcon","feature","latlng","icon","L","Icon","iconUrl","require","iconRetinaUrl","iconAnchor","popupAnchor","shadowUrl","shadowSize","shadowAnchor","iconSize","marker","MapComp","zoom","Math","random","toString","substr","slice","reverse","layer","popupContent","bindPopup","Map","center","getCoordinates","TileLayer","attribution","url","GeoJSON","key","getKey","data","onEachFeature","pointToLayer","DetailCard","renderCard","sort","b","waze","Row","Card","style","width","Body","Text","class","href","Container","Panel","role","data-toggle","aria-controls","aria-selected","aria-labelledby","App","setState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"8TAee,M,yIAVGA,G,uFACWC,MAAMC,WAAeF,GAAIG,MAAK,SAACC,GAAO,OAAOA,K,cAA9DC,E,yBACGA,G,wKAEEL,G,uFACSM,KAAKC,QAAQP,G,cAA5BQ,E,yBACc,SAAXA,G,+HCRd,SAASC,EAAgBC,GACrB,MAAO,CACHC,SAAUD,EAAQE,SAASC,YAAY,GACvCC,UAAWJ,EAAQE,SAASC,YAAY,I,IC0DjCE,E,YAtDX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,GACb,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBAHP,E,oHAKEC,G,oFAChBA,EAAMC,iBACFC,EAAUF,EAAMG,OAAOC,SAAS,GAAGC,M,SACnBC,cAAYC,OAAO,CACnCC,OAAQN,EACRO,KAAO,0C,aAFPC,E,QAISC,OAAS,G,wBACdC,EAAQC,QAAoBH,EAAQ,GAAG,CAACI,MAAM,CAAC,MAAM,S,SACpC5B,KAAK6B,YAAYH,G,OAAjCI,E,OACL9B,KAAKU,MAAMqB,QAAQ,CAACC,YAAYN,EAAOO,SAAUH,I,wBAG/CI,MAAM,oF,mLAGER,G,gFACVS,EAAWC,OAAOC,OAAO,GAAIC,G,SACVC,QAAQC,IAAIL,EAASM,SAASC,IAAlB,uCAAsB,WAAOC,EAAKC,GAAZ,iBAAAC,EAAA,yDDvB/CC,ECwBcpB,EDxBVqB,ECwBgBJ,KAAtBK,EDvBLC,sBACH9C,EAAgB2C,GAChB3C,EAAgB4C,KCsBD,MAF0C,gCAG9BG,EAAWC,OAAOR,EAAKS,WAAWC,WAHJ,cAG7CnD,EAH6C,OAIjDiC,EAASM,SAASG,GAAOQ,WAAWE,SAAWN,EAJE,kBAK1C9C,GAL0C,iCAO9C,GAP8C,iCDvBjE,IAAkB4C,EAAIC,ICuB2C,OAAtB,0D,cAA/BQ,E,OASJpB,EAASM,SAAWN,EAASM,SAASe,QAAO,SAACb,EAAKC,GAChD,OAAOW,EAAUX,M,kBAEbT,G,iIAGP,OACI,yBAAKsB,UAAY,uBACb,yBAAKA,UAAY,OACb,yBAAKA,UAAY,iBACb,kBAACC,EAAA,EAAD,CAAMD,UAAU,0DAA0D/C,MAASV,KAAKU,MAAMiD,YAAaC,SAAU5D,KAAKY,eACtH,uBAAG6C,UAAU,eAAeI,cAAY,SACxC,2BAAOC,KAAK,cAAcL,UAAU,yCAAyCM,KAAK,OAAOC,YAAY,SACjGC,aAAW,mB,GA9CtBC,a,2DCPfC,EAAc,SAASC,EAASC,GAClC,IAAIC,EAAO,IAAIC,IAAEC,KAAK,CACtBC,QAASC,EAAQ,IACjBC,cAAeD,EAAQ,IACvBE,WAAY,KACZC,YAAa,EAAE,GAAI,IACnBC,UAAW,KACXC,WAAY,KACZC,aAAc,KACdC,SAAU,IAAIV,IAAE3C,MAAM,GAAI,IAC1B6B,UAAW,qBAEf,OAAOc,IAAEW,OAAOb,EAAQ,CAACC,KAAMA,KC0BhBa,E,YAlCX,WAAYzE,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CAACyE,KAAK,IAFL,E,sEAKd,MAAO,IAAMC,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,K,qCAGvCpF,GACX,OAAe,MAAXA,EACOA,EAAQE,SAASC,YAAYkF,QAAQC,UAGrC,O,oCAGDtB,EAASuB,GACnB,IAAMC,EAAY,4BAAwBxB,EAAQhB,WAAWU,KAA3C,6EAAoHM,EAAQhB,WAAWC,UAAvI,kEAA0Me,EAAQhB,WAAWU,KAA7N,8CAClB6B,EAAME,UAAUD,K,+BAGhB,OACI,yBAAKlG,GAAG,UACJ,kBAACoG,EAAA,EAAD,CAAKC,OAAU/F,KAAKgG,eAAehG,KAAKU,MAAMsB,aAAcoD,KAAQpF,KAAKW,MAAMyE,MAC3E,kBAACa,EAAA,EAAD,CAAWC,YAAY,0EACnBC,IAAI,uDACR,kBAACC,EAAA,EAAD,CAASC,IAAKrG,KAAKsG,OAAOtG,KAAKU,MAAMsB,aAAcuE,KAAMvG,KAAKU,MAAMsB,cACpE,kBAACoE,EAAA,EAAD,CAASC,IAAKrG,KAAKsG,OAAOtG,KAAKU,MAAMuB,UAAWuE,cAAiBxG,KAAKwG,cAAeC,aAAgBtC,EAAaoC,KAAMvG,KAAKU,MAAMuB,iB,GA5BjIiC,a,2BC8CPwC,G,mBA9CX,WAAYhG,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,GACb,EAAKgG,WAAa,EAAKA,WAAW9F,KAAhB,gBAHJ,E,0EAMd,OAA2B,MAAvBb,KAAKU,MAAMuB,SACOjC,KAAKU,MAAMuB,SAASQ,SAASmE,MAAK,SAAC/D,EAAEgE,GAAQ,OAAOhE,EAAEO,WAAWE,SAAWuD,EAAEzD,WAAWE,YACjFZ,KAAI,SAACC,GAC3B,IAAImB,EAAOnB,EAAKS,WAAWU,KACvBR,EAAWX,EAAKS,WAAWE,SAC3B6C,EAAM,sDAAsDxD,EAAKS,WAAWC,UAC5EyD,EAAO,6BAA+BhD,EAC1C,OACI,kBAACiD,EAAA,EAAD,CAAKtD,UAAY,QACb,kBAACuD,EAAA,EAAD,CAAMC,MAAO,CAACC,MAAQ,SAClB,kBAACF,EAAA,EAAKG,KAAN,KACI,kBAACH,EAAA,EAAKI,KAAN,KACA,wBAAIC,MAAQ,iBACR,4BAAKvD,GACL,4BAAKR,EAAL,KACA,4BAAI,uBAAGgE,KAAQnB,GAAX,iBACJ,4BAAI,uBAAGmB,KAAQR,GAAX,qBAUpB,O,+BAGZ,OACI,kBAACS,EAAA,EAAD,CAAW9D,UAAY,WACnB,yBAAKA,UAAY,iBACZzD,KAAK2G,mB,GAvCDzC,cC4BVsD,E,iLAzBP,OACI,yBAAK/D,UAAU,aACX,yBAAKA,UAAU,iCACX,yBAAKA,UAAU,0BACX,yBAAK4D,MAAM,kBACP,yBAAKA,MAAM,eAAe3H,GAAG,UAAU+H,KAAK,WACxC,uBAAGJ,MAAM,2BAA2B3H,GAAG,cAAcgI,cAAY,MAAMJ,KAAK,WACxEG,KAAK,MAAME,gBAAc,UAAUC,gBAAc,QADrD,OAEA,uBAAGP,MAAM,oBAAoB3H,GAAG,iBAAiBgI,cAAY,MAAMJ,KAAK,cACpEG,KAAK,MAAME,gBAAc,aAAaC,gBAAc,SADxD,aAIR,yBAAKP,MAAM,cAAc3H,GAAG,kBACxB,yBAAK2H,MAAM,4BAA4B3H,GAAG,UAAU+H,KAAK,WACrDI,kBAAgB,eAAc,kBAAC,EAAD,CAAK7F,YAAehC,KAAKU,MAAMsB,YAAcC,SAAYjC,KAAKU,MAAMuB,YACtG,yBAAKoF,MAAM,gBAAgB3H,GAAG,aAAa+H,KAAK,WAC5CI,kBAAgB,kBAAiB,kBAAC,EAAD,CAAY5F,SAAYjC,KAAKU,MAAMuB,oB,GAlBhFiC,aCsBL4D,E,YArBb,WAAYpH,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACXqB,YAAc,KACdC,SAAW,MAEb,EAAKF,QAAU,EAAKA,QAAQlB,KAAb,gBANC,E,qEAQVH,GACNV,KAAK+H,SAASrH,K,+BAGd,OACE,yBAAK+C,UAAU,OACb,kBAAC,EAAD,CAAQ1B,QAAW/B,KAAK+B,QAASC,YAAehC,KAAKW,MAAMqB,cAC3D,kBAAC,EAAD,CAAQA,YAAehC,KAAKW,MAAMqB,YAAaC,SAAYjC,KAAKW,MAAMsB,gB,GAhB5DiC,aCOE8D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9I,MAAK,SAAA+I,GACjCA,EAAaC,iB,mBEnInBC,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.b3d96473.chunk.js","sourcesContent":["import * as $ from \"jquery\"\r\n\r\nlet serviceUrl = \"/status\"\r\n\r\nclass ParkingStatus {\r\n    async getByID(id){\r\n        let response = await $.get(serviceUrl+\"/\"+id).then((res)=>{return res})\r\n        return response\r\n    }\r\n    async isFree(id){\r\n       let status = await this.getByID(id);\r\n       return status === \"free\";\r\n    }\r\n}\r\n\r\nexport default new ParkingStatus()","import {getDistance} from 'geolib';\r\n\r\n\r\nfunction convertToLonLat(geojson) {\r\n    return {\r\n        latitude: geojson.geometry.coordinates[0],\r\n        longitude: geojson.geometry.coordinates[1]\r\n    }\r\n}\r\n\r\nfunction distance(p1, p2) {\r\n    return getDistance(\r\n        convertToLonLat(p1),\r\n        convertToLonLat(p2)\r\n    )\r\n}\r\n\r\n\r\nexport {distance}","import React, {Component} from \"react\"\r\nimport {Form} from \"react-bootstrap\"\r\nimport \"./searchComponent.css\"\r\nimport {NominatimJS} from \"nominatim-search\"\r\nimport * as GeoJSONParser from \"geojson\"\r\nimport ParkStatus from \"../shared/parkStatus\"\r\nimport parking from \"../shared/parking.json\"\r\nimport {distance} from \"../shared/geometryLib\"\r\n\r\nclass Search extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {}\r\n        this.locateAddress = this.locateAddress.bind(this);\r\n    }\r\n    async locateAddress(event){\r\n        event.preventDefault();\r\n        let address = event.target.elements[0].value;\r\n        let results = await NominatimJS.search({\r\n            street: address,\r\n            city : \"תל אביב\"\r\n          });\r\n          if(results.length > 0){\r\n            let point = GeoJSONParser.parse(results[0],{Point:[\"lat\",\"lon\"]})\r\n            let  closest = await this.closetParks(point)\r\n            this.props.handler({searchPoint:point, parkings: closest})\r\n          }\r\n          else{\r\n              alert(\"לא נמצאו תוצאות\")\r\n          }\r\n    }\r\n    async closetParks(point){\r\n        let _parking = Object.assign({}, parking);\r\n        let boolArray =  await Promise.all(_parking.features.map(async (item,index) => {\r\n            let dist = distance(point,item);\r\n            if (dist < 1200){\r\n                let status = await ParkStatus.isFree(item.properties.parkingid);\r\n                _parking.features[index].properties.distance = dist;\r\n                return status;\r\n            }\r\n            return false;\r\n        }))\r\n        _parking.features = _parking.features.filter((item,index) => {\r\n           return boolArray[index];\r\n        })\r\n        return _parking;\r\n    }\r\n    render(){\r\n        return (\r\n            <div className = \"container searchbar\">\r\n                <div className = \"row\">\r\n                    <div className = \"col mt-3 mb-3\">\r\n                        <Form className=\"form-inline md-form form-sm mt-0 justify-content-center\" props = {this.props.centerPoint} onSubmit={this.locateAddress}>\r\n                            <i className=\"fa fa-search\" aria-hidden=\"true\"></i>\r\n                            <input name=\"searchInput\" className=\"form-control form-control-sm ml-3 w-75\" type=\"text\" placeholder=\"Search\"\r\n                                aria-label=\"Search\"/>\r\n                        </Form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search;","import L from 'leaflet';\r\n\r\nconst parkingIcon = function(feature, latlng){ \r\n    let icon = new L.Icon({\r\n    iconUrl: require('./img/parking.jpg'),\r\n    iconRetinaUrl: require('./img/parking.jpg'),\r\n    iconAnchor: null,\r\n    popupAnchor: [-3, -76],\r\n    shadowUrl: null,\r\n    shadowSize: null,\r\n    shadowAnchor: null,\r\n    iconSize: new L.Point(30, 31),\r\n    className: 'leaflet-div-icon'\r\n});\r\nreturn L.marker(latlng, {icon: icon});\r\n\r\n\r\n}\r\n\r\nexport { parkingIcon };","import React, {Component} from \"react\"\r\nimport {Map,TileLayer,GeoJSON} from \"react-leaflet\"\r\nimport \"./mapComponent.css\"\r\nimport {parkingIcon} from \"../icons\"\r\n\r\nclass MapComp extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {zoom:15}\r\n    }\r\n    getKey(){\r\n        return '_' + Math.random().toString(36).substr(2, 9);\r\n    }\r\n\r\n    getCoordinates(geojson){\r\n        if (geojson != null){\r\n            return geojson.geometry.coordinates.slice().reverse();\r\n        }\r\n        else{\r\n            return null\r\n        }\r\n    }\r\n    onEachFeature(feature, layer) {\r\n        const popupContent = `<Popup><p>Address:${feature.properties.name} <br/><a href=\"http://www.ahuzot.co.il/Parking/ParkingDetails/?ID=${feature.properties.parkingid}\">Details</a><br/><a href = \"https://www.waze.com/ul/q=${feature.properties.name}\">נווט</a></p></Popup>`\r\n        layer.bindPopup(popupContent)\r\n      }\r\n    render(){\r\n        return (\r\n            <div id=\"mapDiv\">\r\n                <Map center = {this.getCoordinates(this.props.searchPoint)} zoom = {this.state.zoom}>\r\n                    <TileLayer attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n                    <GeoJSON key={this.getKey(this.props.searchPoint)} data={this.props.searchPoint}/>\r\n                    <GeoJSON key={this.getKey(this.props.parkings)} onEachFeature = {this.onEachFeature} pointToLayer = {parkingIcon} data={this.props.parkings}/>\r\n                </Map>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MapComp;","import React, {Component} from \"react\"\r\nimport {Container,Row,Card} from \"react-bootstrap\"\r\nimport \"./detailCardComponent.css\"\r\n\r\nclass DetailCard extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {}\r\n        this.renderCard = this.renderCard.bind(this)\r\n    }\r\n    renderCard(){\r\n        if (this.props.parkings != null){\r\n            let sortedParks = this.props.parkings.features.sort((a,b) => { return a.properties.distance - b.properties.distance })\r\n            let details = sortedParks.map((item) => {\r\n                let name = item.properties.name\r\n                let distance = item.properties.distance\r\n                let url = \"http://www.ahuzot.co.il/Parking/ParkingDetails/?ID=\"+item.properties.parkingid\r\n                let waze = \"https://www.waze.com/ul/q=\" + name\r\n                return(\r\n                    <Row className = \"mb-5\">\r\n                        <Card style={{width : \"100%\"}}>\r\n                            <Card.Body>\r\n                                <Card.Text>\r\n                                <ul class = \"list-unstyled\">\r\n                                    <li>{name}</li>\r\n                                    <li>{distance}M</li>\r\n                                    <li><a href = {url}>More Details</a></li>\r\n                                    <li><a href = {waze}>Navigate</a></li>\r\n                                </ul>\r\n                                </Card.Text>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Row>\r\n                )\r\n            })\r\n            return details\r\n        }\r\n        else return null;\r\n    }\r\n    render(){\r\n        return (\r\n            <Container className = \"details\">\r\n                <div className = \"col col-sm-12\">\r\n                    {this.renderCard()}\r\n                </div>\r\n            </Container>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default DetailCard;","import React, {Component} from \"react\"\r\nimport \"./panelComponent.css\"\r\nimport Map from \"./mapComponent\"\r\nimport DetailCard from \"./detailCardComponent\"\r\n\r\nclass Panel extends Component{\r\n    render(){\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row justify-content-sm-center\">\r\n                    <div className=\"col col-sm-9 mt-3 mb-3\">\r\n                        <nav class=\"navbar-default\">\r\n                            <div class=\"nav nav-tabs\" id=\"nav-tab\" role=\"tablist\">\r\n                                <a class=\"nav-item nav-link active\" id=\"nav-map-tab\" data-toggle=\"tab\" href=\"#nav-map\"\r\n                                    role=\"tab\" aria-controls=\"nav-map\" aria-selected=\"true\">Map</a>\r\n                                <a class=\"nav-item nav-link\" id=\"nav-detail-tab\" data-toggle=\"tab\" href=\"#nav-detail\"\r\n                                    role=\"tab\" aria-controls=\"nav-detail\" aria-selected=\"false\">Details</a>\r\n                            </div>\r\n                        </nav>\r\n                        <div class=\"tab-content\" id=\"nav-tabContent\">\r\n                            <div class=\"tab-pane fade show active\" id=\"nav-map\" role=\"tabpanel\"\r\n                                aria-labelledby=\"nav-map-tab\"><Map searchPoint = {this.props.searchPoint}  parkings = {this.props.parkings}></Map></div>\r\n                            <div class=\"tab-pane fade\" id=\"nav-detail\" role=\"tabpanel\"\r\n                                aria-labelledby=\"nav-detail-tab\"><DetailCard parkings = {this.props.parkings}></DetailCard></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Panel;","import React, {Component} from 'react';\nimport './App.css';\nimport Search from \"./components/searchComponent\"\nimport Panel from \"./components/panelComponent\"\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      searchPoint : null,\n      parkings : null\n    }\n    this.handler = this.handler.bind(this);\n  }\n  handler(props){\n    this.setState(props);\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <Search handler = {this.handler} searchPoint = {this.state.searchPoint}></Search>\n        <Panel  searchPoint = {this.state.searchPoint} parkings = {this.state.parkings}></Panel>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/parking.a8871931.jpg\";"],"sourceRoot":""}